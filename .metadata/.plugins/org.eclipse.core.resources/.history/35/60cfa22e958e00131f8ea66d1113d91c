package com.sciaps.analysis;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.sciaps.common.calculation.libs.LIBSCalculations;
import com.sciaps.common.data.libs.AlloyBase;
import com.sciaps.common.data.libs.AssayTable;
import com.sciaps.common.data.libs.AssayTableLibrary;
import com.sciaps.common.data.libs.FingerprintAnalysisResult;
import com.sciaps.common.data.libs.FingerprintLibrary;
import com.sciaps.common.data.libs.LIBSSpectrum;
import com.sciaps.common.data.libs.LIBSSpectrumResult;
import com.sciaps.common.data.libs.LayeredSpectrum;
import com.sciaps.common.data.libs.RegionTableLibrary;
import com.sciaps.utils.HelperFxns;

@RunWith(Parameterized.class)
public class LibsAnalyzerTests {

    LibsSpectrumAnalyzer mSpectrumAnalyzer;
    static AssayTableLibrary m_assayTableLibrary;
    static FingerprintLibrary m_fingerprintLibrary;
    static RegionTableLibrary m_regionTableLibrary;

    private File m_testFile;

    public LibsAnalyzerTests(File testFile) {

        m_testFile = testFile;
    }

    @Parameters
    public static Collection<File[]> testFiles() {
        File dataDirectory = new File("./data");
        File[] testFiles = dataDirectory.listFiles();

        Collection<File[]> coll = new ArrayList<File[]>();

        for (File singleFile : testFiles) {
            if (singleFile.isDirectory())
                continue;

            if (!HelperFxns.getFileExtension(singleFile).equals("csv"))
                continue;

            coll.add(new File[] { singleFile });
        }

        return coll;

    }

    @BeforeClass
    public static void setup() {
        m_assayTableLibrary = (AssayTableLibrary) HelperFxns.loadObjectFromFile("./AssayTableLibrary.bin");
        m_fingerprintLibrary = (FingerprintLibrary) HelperFxns.loadObjectFromFile("./FingerprintLibrary.bin");
        m_regionTableLibrary = (RegionTableLibrary) HelperFxns.loadObjectFromFile("./RegionTableLibrary.bin");
        // FingerprintLibrary.createFingerprintsFromLayeredCSVsForAllBases(m_regionTableLibrary);
        // m_fingerprintLibrary.recreateEntireLibraryFromDisk(m_regionTableLibrary);
        // m_fingerprintLibrary.saveToDisk();
    }

    @Test
    public void chemistryTests() throws Exception {

        // Strip out any parens prior to the file extension, then remove the
        // extension
        String parenValsString = HelperFxns.getParenValueInString(m_testFile.getName());
        String alloyName = HelperFxns.trimParensPriorToFileExtension(m_testFile.getName());
        alloyName = HelperFxns.trimFileExtension(alloyName).trim();

        File debugFile = new File(HelperFxns.trimFileExtension(m_testFile.getPath()) + ".dbg");

        debugFile.delete();
        debugFile.createNewFile();

        LIBSCalculations.debugOutputFile = debugFile;

        LayeredSpectrum layeredSpectrum = LayeredSpectrum.parseFromCSV(m_testFile, ',', 2);
        LIBSSpectrum singleSpectrum = layeredSpectrum.getAverage();
        LIBSSpectrumResult singleResult = new LIBSSpectrumResult(singleSpectrum);

        FingerprintAnalysisResult fingerprintAnalysisResult = LIBSCalculations.PrimaryCalculation(singleResult, m_regionTableLibrary, m_fingerprintLibrary,
                m_assayTableLibrary);

        Assert.assertNotNull(fingerprintAnalysisResult);

        AssayTable assayTable = m_assayTableLibrary.searchForAlloy(alloyName);

        if (assayTable != null && !assayTable.base.equals(AlloyBase.None_Base)) {
            Assert.assertEquals(assayTable.base, fingerprintAnalysisResult.alloyBase);
        }

        Assert.assertNotNull(fingerprintAnalysisResult.fingerprintMatches);
        Assert.assertEquals(alloyName, fingerprintAnalysisResult.fingerprintMatches.get(0).distilledFingerprint.fingerprintInfo.shortName);

        Assert.assertNotNull(fingerprintAnalysisResult.chemistry);

        if (fingerprintAnalysisResult.chemistry != null) {
            Assert.assertEquals(100, fingerprintAnalysisResult.chemistry.getSumOfAllResults(), .0001);

            /*
             * for (SingleRegionResult singleChemistry :
             * fingerprintAnalysisResult.chemistry.getAllResults()) { Element e
             * = singleChemistry.getElement();
             * Assert.assertEquals(assayTable.getAssayForElement(e).getValue(),
             * singleChemistry.getValue(), .02 *
             * assayTable.getAssayForElement(e).getValue());
             * 
             * }
             */
        }

    }
}
