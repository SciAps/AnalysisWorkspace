package com.sciaps.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

public final class HelperFxns {
    private HelperFxns() {
        // Hide Constructor For Static Class
    }

    public static void saveObjectToFile(Serializable o, File f) {
        ObjectOutputStream oos = null;
        try {
            FileOutputStream fos = new FileOutputStream(f);
            GZIPOutputStream gzoos = new GZIPOutputStream(fos);
            oos = new ObjectOutputStream(gzoos);
            oos.writeObject(o);
            oos.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtils.safeClose(oos);
        }
    }

    public static void saveObjectToFile(Serializable o, String path, String fname) {
        try {
            String fnamePlusPath = fname;
            if (path != null) {
                File f = new File(path);
                f.mkdirs();
                fnamePlusPath = path + fname;
            }
            File f = new File(fnamePlusPath);

            if (!f.exists()) {
                f.createNewFile();
            }

            saveObjectToFile(o, f);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Object loadObjectFromFile(String s) {
        return loadObjectFromFile(new File(s));
    }

    public static Object loadObjectFromFile(String dir, String fname) {
        return loadObjectFromFile(new File(dir + fname));
    }

    public static Object loadObjectFromFile(File f) {
        PackageRepairingObjectInputStream oin = null;
        try {
            FileInputStream fis = new FileInputStream(f);
            GZIPInputStream gzis = new GZIPInputStream(fis);
            oin = new PackageRepairingObjectInputStream(gzis);
            Object o = oin.readObject();

            return o;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtils.safeClose(oin);
        }

        return null;
    }

    public static void delTree(File f) {
        for (final File fileEntry : f.listFiles()) {
            if (fileEntry.isDirectory()) {
                delTree(f);
            } else {
                fileEntry.delete();
            }

            f.delete();
        }
    }

    public static String getNextAvailableFileName(String dir, String fname) {
        int ndx = 1;
        while (true) {
            String formattedFname;
            if (hasIntegerFormatter(fname)) {
                formattedFname = String.format(fname, ndx++);
            } else {
                formattedFname = fname + "-" + ndx;
            }

            String path = dir + formattedFname;
            File f = new File(path);
            if (f.exists()) {
                continue;
            }
            return formattedFname;
        }
    }

    public static boolean hasIntegerFormatter(String s) {
        return s.contains("%d");
    }

    @SuppressWarnings("unused")
    private static String convertSecondsToHrMinSeconds(int s) {
        int hrs = s / (60 * 60);
        s -= hrs * 60 * 60;
        int mins = s / 60;
        s -= mins * 60;
        String ret = "";
        if (hrs > 0) {
            ret = (hrs + "H ");
        }
        if (mins > 0) {
            ret = ret + (mins + "M ");
        }

        ret = ret + s + "S";

        return ret;
    }

    public static Object cloneViaSerialization(Serializable s) {
        ByteArrayOutputStream baos = null;
        ByteArrayInputStream bais = null;
        try {
            baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(s);

            bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);

            return ois.readObject();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            IOUtils.safeClose(baos);
            IOUtils.safeClose(bais);
        }
    }

    public static String getFileExtension(File f) {

        String extension = "";

        int i = f.getName().lastIndexOf('.');
        if (i > 0) {
            extension = f.getName().substring(i + 1);
        }

        return extension;
    }

    public static String trimFileExtension(File f, boolean useAbsolutePath) {

        String trimmed = f.getName();

        int i = f.getName().lastIndexOf('.');
        if (i > 0) {
            trimmed = f.getName().substring(0, i);
        }

        return trimmed;
    }

}