package com.sciaps.analysis;

import java.io.File;



import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.sciaps.common.calculation.libs.LIBSCalculations;
import com.sciaps.common.data.libs.AlloyBase;
import com.sciaps.common.data.libs.AssayTableLibrary;
import com.sciaps.common.data.libs.El;
import com.sciaps.common.data.libs.Element;
import com.sciaps.common.data.libs.FingerprintAnalysisResult;
import com.sciaps.common.data.libs.FingerprintLibrary;
import com.sciaps.common.data.libs.LIBSSpectrum;
import com.sciaps.common.data.libs.LIBSSpectrumResult;
import com.sciaps.common.data.libs.LayeredSpectrum;
import com.sciaps.common.data.libs.RegionTableLibrary;
import com.sciaps.utils.HelperFxns;

public class LibsAnalyzerTests {

    LibsSpectrumAnalyzer mSpectrumAnalyzer;
    AssayTableLibrary m_assayTableLibrary;
    FingerprintLibrary m_fingerprintLibrary;
    RegionTableLibrary m_regionTableLibrary;

    @Before
    public void setup() {
        m_assayTableLibrary = (AssayTableLibrary) HelperFxns.loadObjectFromFile("./data/AssayTableLibrary.bin");
        m_fingerprintLibrary = (FingerprintLibrary) HelperFxns.loadObjectFromFile("./data/FingerprintLibrary.bin");
        m_regionTableLibrary = (RegionTableLibrary) HelperFxns.loadObjectFromFile("./data/RegionTableLibrary.bin");
       
    }

  
    
    @Test
    public void steel316Test() throws Exception {

        File testFile = new File("./data/CDA172.csv");


        LayeredSpectrum layeredSpectrum = LayeredSpectrum.parseFromCSV(testFile, ',', 2);
        LIBSSpectrum singleSpectrum = layeredSpectrum.getAverage();
        LIBSSpectrumResult singleResult = new LIBSSpectrumResult(singleSpectrum);
        
        FingerprintAnalysisResult fingerprintAnalysisResult = LIBSCalculations.PrimaryCalculation(singleResult, m_regionTableLibrary, m_fingerprintLibrary, m_assayTableLibrary);
        
        Assert.assertNotNull(fingerprintAnalysisResult);
        Assert.assertEquals(fingerprintAnalysisResult.alloyBase, AlloyBase.Cu_Base);
        Assert.assertNotNull(fingerprintAnalysisResult.fingerprintMatches);
        Assert.assertEquals(fingerprintAnalysisResult.fingerprintMatches.get(0).distilledFingerprint.fingerprintInfo.shortName, "CDA172");
        
        Assert.assertEquals(100,fingerprintAnalysisResult.chemistry.getSumOfAllResults(), .0001);
        Assert.assertEquals(95,fingerprintAnalysisResult.chemistry.getResultForElement(El.Cu).getValue(), 3);
        
        
              
        
    }
}
